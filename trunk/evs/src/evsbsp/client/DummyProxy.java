package evsbsp.client;

/* Automatically generated by EVS JavaCodeGenerator */

import java.util.ArrayList;

import evs.core.AClientProxy;
import evs.core.AOR;
import evs.core.InvocationObject;
import evs.core.InvocationStyle;
import evs.core.ObjectReference;
import evs.core.WebLocation;
import evs.exception.IllegalMethodException;
import evs.exception.IllegalObjectException;
import evs.exception.NotSupportedException;
import evs.exception.RemotingException;
import evs.interfaces.IACT;
import evs.interfaces.ICallback;
import evs.interfaces.IInvocationObject;
import evsbsp.IDummyOperations;
import evsbsp.exception.DummyException;

public class DummyProxy extends AClientProxy implements IDummyOperations  {
	
	//automatically generated default values
	private static final String INVOKER_ID = evsbsp.server.DummyInvoker.class.getName();
	private static final String OBJECT_ID = evsbsp.server.Dummy.class.getName(); 
	private static final String HOSTNAME = "localhost";
	private static final String PORT = "1337";
	
	public DummyProxy(ICallback callback){
		super(callback);
		this.aor = new AOR(new WebLocation(HOSTNAME, PORT), new ObjectReference(OBJECT_ID, INVOKER_ID));
	}
	
	public DummyProxy(InvocationStyle requestType, ICallback callback){
		super(requestType, callback);
		this.aor = new AOR(new WebLocation(HOSTNAME, PORT), new ObjectReference(OBJECT_ID, INVOKER_ID));
	}

	
	public Object testCall(Integer a, IACT act) throws DummyException, NotSupportedException{
		ArrayList<Object> arguments = new ArrayList<Object>();
		arguments.add(a);
		arguments.add(act);
		
		Object returnObject = null;
		
		try{
			IInvocationObject object = new InvocationObject(getAOR(), "testCall", arguments, "void");
			returnObject = requestor.invoke(object, true, callback, act, requestType);
		} catch(RemotingException ex){
			 if(ex instanceof DummyException) throw (DummyException) ex;
			 if(ex instanceof IllegalObjectException) throw new NotSupportedException(ex.getMessage());
			 if(ex instanceof IllegalMethodException) throw new NotSupportedException(ex.getMessage());
			 if(ex instanceof NotSupportedException) throw (NotSupportedException) ex;
			 System.out.println("[x] ERROR: " + ex.getClass().getName() + " :" + ex.getMessage());
			 ex.printStackTrace();
		}
		
		return returnObject;
	}
	
	
	public Object getCounter(IACT act) throws DummyException, NotSupportedException{
		ArrayList<Object> arguments = new ArrayList<Object>();
		Object returnObject = null;
		arguments.add(act);		
		
		try{
			IInvocationObject object = new InvocationObject(getAOR(), "getCounter", arguments, "Integer");			
			returnObject = requestor.invoke(object, false, callback, act, requestType);
		} catch(RemotingException ex){
			 if(ex instanceof DummyException) throw (DummyException) ex;
			 if(ex instanceof IllegalObjectException) throw new NotSupportedException(ex.getMessage());
			 if(ex instanceof IllegalMethodException) throw new NotSupportedException(ex.getMessage());
			 if(ex instanceof NotSupportedException) throw (NotSupportedException) ex;
			 System.out.println("[x] ERROR: " + ex.getClass().getName() + " :" + ex.getMessage());
			 ex.printStackTrace();
		}
		
		return returnObject;
	}

}
